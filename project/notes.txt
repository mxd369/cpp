============
matrix.h
#ifndef __adf__matrix__
#define __adf__matrix__

#include <iostream>


class Matrix {
    const int row;
public:
    Matrix() : row(5)
    {}
    int getRow() const;
};


#endif
============
matrix.cpp
#include "matrix.h"

inline int Matrix::getRow() const
{
    return row;
}
=============

1.5 Compiler Warnings
Since you should be compiling with both the -Wall and pedantic-errors options, your code is expected to compile without g++ issuing any warnings. For this project, compiling without warnings will be one or more of the test cases.

1.6 Memory Leaks
Since this project makes use of dynamic memory allocation, you are expected to ensure that your Matrix implementation doesn't result in any memory leaks. We will test for memory leaks using the valgrind utility. For this project, having no memory leaks will be one or more of the test cases.