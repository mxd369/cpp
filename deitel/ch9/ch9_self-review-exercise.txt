Ch9 Classes: A Deeper Look
===========================Self-Review Exercises
===========================9.1

Fill in the blanks in each of the following:

a) Class members are accessed via the operator in conjunction with the name of an object (or reference to an object) of the class or via the operator in conjunction with a pointer to an object of the class.

b) Class members specified as are accessible only to member functions of the class and friends of the class.

c) Class members specified as are accessible anywhere an object of the class is in scope.

d) can be used to assign an object of a class to another object of the same class.

===========================9.2

Find the error(s) in each of the following and explain how to correct it (them):
a) Assume the following prototype is declared in class Time:
void ~Time( int );
b) The following is a partial definition of class Time:
class Time
{
public:
// function prototypes
private:
int hour = 0;
int minute = 0;
int second = 0;
}; // end class Time
c) Assume the following prototype is declared in class Employee:
int Employee( string, string );


===========================Exercises
===========================9.3
(Scope Resolution Operator) What’s the purpose of the scope resolution operator?

operator :: know as scope resolution operator has been introduced to access an item that is outside the current scope. This operator is also used in distiguishing class members and defining class methods.

Years ago before anyone heard about namespaces programmers had a terrible time avoiding name conflicts in their own code and the libraries they used. That was the main reason (I think) for the introduction of namespaces -- you can have as many objects with the same name as you wish as long as each object is contained in a different namespace. You will commonlu see code such as

Code:

std::cout << "Hello World" std::endl;

This is identifying the namespace (std) of cout and endl. For objects in global namespace, such as all the win32 api functions just preceed the object with two colons as in the following code. This is really more useful when there is another function called MessageBox() in another namespace that your program also might use. Its just telling the compiler which function to call.

Code:

::MessageBox(0, "Hello World", "Message", MB_OK);

c++ classes have the same affect as formal namespace

Code:

::MessageBox(0, "Hello World", "Message", MB_OK);

c++ classes have the same affect as formal namespace

Code:

class MyClass
{
	MyClass();
	static void SayHello() {
		std::cout << "Hello World" << std::endl;
	}
}; // call the SayHello method
MyClass::SayHello

Lets say you have a global variable and a local variable with the same name. When you compile it, the compiler will use the local variable, and not the global variable. If you prefix the variable name with ::[variablename], then the compiler uses the global variable.

Code:

#include <iostream>
using namespace std;
int amount = 123;	// A global variable

int main()
{
	int amount = 456;		  // A local variable
	cout << ::amount << endl; // Print the global variable
	cout << amount << endl;   // Print the local variable
}

// You can do this even for function names.
Note that you can use this to specify only global variables. Not the variable sin the next outermost scope.

Code:

#include <iostream>

using namespace std;
int amount = 123;	// A global variable

int main()
{
	int amount = 1234; // the local variable in the outermost scope
	{
		int amount = 456; // A local variable
		cout << "Innermost Scope" << endl;
		cout << ::amount << endl;
		// Print the global variable not the value with 1234
		cout << amount << endl;
		// Print the local variable in current scope
	}
	cout << "Outermost Scope" << endl;
	cout << ::amount << endl; // Print the global variable
	cout << amount << endl;   // Print the local variable in current scope
}

// operator :: known as scope resolution operator has been introduced to access an item that is outside the current scope. This operator is also used in distiguishing class memebers and defining class methods.

===========================9.4
===========================9.5
===========================9.6

book

Rational Class) Create a class called Rational for performing arithmetic with fractions.
Write a program to test your class.
Use integer variables to represent the private data of the class—the numerator and the denominator.
Provide a constructor that enables an object of this class to be initialized when it’s declared.
The constructor should contain default values in case no initializers are provided and should store
the fraction in reduced form. For example, the fraction
would be stored in the object as 1 in the numerator and 2 in the denominator. Provide public
member functions that perform each of the following tasks:
a) Adding two Rational numbers. The result should be stored in reduced form.
b) Subtracting two Rational numbers. The result should be stored in reduced form.
c) Multiplying two Rational numbers. The result should be stored in reduced form.
d) Dividing two Rational numbers. The result should be stored in reduced form.
e) Printing Rational numbers in the form a/b, where a is the numerator and b is the denominator.
f) Printing Rational numbers in floating-point format.

===========C

1. Create a class called Rational for performing arithmetic with fractions.
Use integer variables to represent the private data of the class � the numerator and the denominator. Provide a constructor that enables an object of this class to be initialized when it is declared. The constructor should contain default values in case no initializers are provided and should store the fraction in reduced form. For example, the fraction

2/4

would be stored the object 1 in the numerator and 2 in the denominator. Provide public member functions that perform each of the following tasks:

a. Adding two Rational numbers by the function called addition. The result should be in reduced form.
b. Subtracting two Rational numbers by the function called subtraction. The result should be in reduced form.
c. Multiplying two Rational numbers by the function called multiplication. The result should be in reduced form.
d. Dividing two Rational numbers by the function called division. The result should be in reduced form.
e. Printing Rational numbers in the form a/b, where a is the numerator and b is the denominator.
f. Printing Rational numbers in floating-point format.


from C:
2. The following is the declaration for fractions class, please save to a class specification file called �rational.h�:
class Rational
{
public:
Rational( int = 0, int = 1 ); // default constructor
Rational addition( const Rational & ); // function addition
Rational subtraction( const Rational & ); // function subtraction
Rational multiplication( const Rational & ); // function multi.
Rational division( const Rational & ); // function division
void printRational (); // print rational format
private:
int numerator; // integer numerator
int denominator; // integer denominator
void reduction(); // utility function
}; // end class Rational

3. Create the function definitions for all member functions in class implementation file called �rational.cpp�. The following is the code for �reduction()� function:
void Rational::reduction()
{
int largest;
int gcd = 0; // greatest common divisor

largest = numerator > denominator ? numerator : denominator;
for ( int loop = 2; loop <= largest; loop++ )
if ( numerator % loop == 0 && denominator % loop == 0 )
gcd = loop;
if (gcd != 0)
{
numerator /= gcd;
denominator /= gcd;
} // end if
} // end function reduction


4. Write a main function and save as �testRational.cpp� to test your class.
int main()
{
Rational c( 2, 6 ), d( 7, 8 ), x; // creates three rational objects

c.printRational(); // prints rational object c
cout << " + ";
d.printRational(); // prints rational object d
x = c.addition( d ); // adds object c and d; sets the value to x
cout << " = ";
x.printRational(); // prints rational object x
cout << "\n\n";

c.printRational(); // prints rational object c
cout << " - ";
d.printRational(); // prints rational object d
x = c.subtraction( d ); // subtracts object c and d
cout << " = ";
x.printRational(); // prints rational object x
cout << "\n\n";

c.printRational(); // prints rational object c
cout << " x ";
d.printRational(); // prints rational object d
x = c.multiplication( d ); // multiplies object c and d
cout << " = ";
x.printRational(); // prints rational object x
cout << "\n\n";

c.printRational(); // prints rational object c
cout << " / ";
d.printRational(); // prints rational object d
x = c.division( d ); // divides object c and d
cout << " = ";
x.printRational(); // prints rational object x
cout << '\n';
x.printRational(); // prints rational object x
cout << endl;
return 0;
} // end main

check rational/main
===========================9.7
===========================9.8
===========================9.9
===========================9.10
===========================9.11

(Rectangle Class) Create a class Rectangle with attributes length and width, each of which defaults to 1. Provide member functions that calculate the perimeter and the area of the rectangle. Also, provide set and get functions for the length and width attributes. The set functions should verify that length and width are each floating-point numbers larger than 0.0 and less than 20.0.

Rectangle.h
Rectangle.cpp
main.cpp

Rectangle.h
// Definition of class Rectangle (Rectangle.h)
// Member functions are defined in Rectangle.cpp
// prevent multiple inclusions of header file
#ifndef RECTANGLE_H
#define RECTANGLE_H

// definition of the class Rectangle
class Rectangle {
public:
	// member functions of the class
	Rectangle(); // default constructor

	// set functions
	void setLength(float);
	void setWidth(float);

	// get functions
	float getLength();
	float getWidth();

	// other utilitiy functions
	float getArea();
	float getPerimeter();

// data members of the class
private:
	float length;
	float width;
}; // end template class Rectangle
#endif

Rectangle.cpp
#include <iostream>	// Allows program to perform input and output
using std::cout;	// program uses cout

#include "Rectangle.h"

// default constructor
Rectangle::Rectangle()
{
	setLength(1.0);
	setWidth(1.0);
} // end constructor

// set the length of the rectangle
void Rectangle::setLength(float myLength)
{
	// validate myLength
	if((myLength < 20) && (myLength > 0))
		length = myLength;
	else
	{
		cout << "\n\nInvalid Length. Default length will be assigned.";
		length = 1.0;
	}
} // end function setLength

// set the width of the rectangle
void Rectangle::setWidth(flaot myWidth)
{
	// validate myWidth
	if((myWidth < 20) && (myWidth > 0))
		width = myWidth;
	else
	{
		cout << "\n\nInvalid width. Default width will be assigned.";
		width = 1;
	}
}// end function setWidth

// return the value of rectangle length
float Rectangle::getLength()
{
	return length;
}// end function getLength


// return the value of rectangle width
float Rectangle::getWidth()
{
	return length;
}// end function getWidth

// return the area of the rectangle
float Rectangle::getArea()
{
	return (length * width);
}// end function getArea

// return perimeter of the rectangle
float Rectangle::getPerimeter()
{
	return (2* (length+width));
}// end function getPerimeter


main.cpp
#include <iostream> // allow program to perform input and output
using std::cout;	// program uses cout
using std::cin;		// program uses cin

#include "Rectangle.h"

// driver program to test the functionality of the Rectangle class
int main()	// funciton main begins program execution
{
	flaot t;
	// let the user know about the program
	cout << "\n\n\tA program that works with Rectangle class.";

	// create an object of type Rectangle
	Rectangle myRectangle;

	// display initial values
	cout << "\n\nInitial values of the rectangle were: " << "\n\nLength = " << myRectangle.getLength()
	<< "\n\nWidth = " << myRectangle.getWidth();

	// modify the values of the object of rectangle
	cout << "\n\n\tModify the rectangle dimensions.";
	cout << "\n\n\tEnter length: ";
	cin >> t;
	myRectangle.setLength(t);
	cout << "\n\tEnter width: ";
	cin >> t;
	myRectangle.setWidth(t);

	// print the modified values of the object
	cout << "\n\n\tAfter modifying the values, the dimensions were : "
		<< "\n\tLength = " << myRectangle.getLength();
		<< "\n\tWidth = " << myRectangle.getWidth();

	// print the other calculations of the object
	cout << "\n\n\tThe area of the rectangle is " << myRectangle.getArea();
	cout << "\n\n\tThe perimeter of the rectangle is " << myRectangle.getPerimeter();

	// let the screen wait to see the output
	cout << "\n\n\t";
	return 0; // indicate program executed successfully
}// end of function main

===========================9.12
===========================9.13
===========================9.14
===========================9.15
===========================9.16
===========================9.17
===========================9.18
===========================9.19
===========================9.20
===========================9.21
===========================9.22
===========================9.23
===========================9.24
===========================9.25
===========================9.26
===========================9.27
===========================Making A Difference
===========================9.28
