Introduction to C++ Programming, Input/Output and Operators

===========================Self-Review Exercises
===========================2.1


A) Every C++ program begins execution at the function _____.
a) main
answer: main

B) A(n) _____ begins the body of every function and a(n) _____ ends the body.
b) open-curly brace, closed-curly-brace
answer: left-brace {, right-brace }

C) Most C++ statement ends with a(n) _____.
c) semi-colon
answer: semicolon

D) The escape sequence \n represents the _____ character, which causes the cursor to position to the beginning of the next line on the screen.
d) newline
answer: newline

E) The _____ statement is used to make decisions.
e) if
answer: if

===========================2.2

State whether each of the following is true or false. If false, explain why. Assume the statement using std::cout; is used.

A) Comments cause the computer to print the text after the // on the screen when the program is executed.
a) false, comments written after // are ignore
answer: False, comments do not cause any action to be performed when the program is executed. They're used to document programs and improve their readability.

B) The escape sequence \n, when output with cout and the stream insertion operator, causes the cursor to position to the beginning of the next line on the screen.
b) true
answer: true

C) All variables must be declared before they’re used.
c) true
answer: true

D) All variables must be given a type when they’re declared.
d) true
answer: true

E) C++ considers the variables number and NuMbEr to be identical.
e) false, C++ is case sensitive
answer: False, c++ is case sensitive, so these variables are different.

F) Declarations can appear almost anywhere in the body of a C++ function.
f) true
answer: true

G) The remainder operator (%) can be used only with integer operands.
g) true
answer: true


H) The arithmetic operators *, /, %, + and – all have the same level of precedence.
h) false, there is precedence:
( )    parentheses
* / %  multiplication division remainder
+ -    addition subtraction 
answer: the operators *, / and % have the same precedece, and the operators + and - have a lower precedence.

I) A C++ program that prints three lines of output must contain three statements using cout and the stream insertion operator.
i) false, can use new line
answer: false, one statement with cout and multiple \n escape sequences can print several liines.

===========================2.3

Write a single C++ statement to accomplish each of the following (assume that using directives have not been used):

A) Declare the variables c, thisIsAVariable, q76354 and number to be of type int.
a) int c, thisIsAVariable, q76354;
answer: int c{0}, thisIsAVariable{0}, q76354{0};

B) Prompt the user to enter an integer. End your prompting message with a colon (:) followed by a space and leave the cursor positioned after the space.
b) std::cout << "Enter an integer: ";
answer: std::cout << "Enter an integer: ";

C) Read an integer from the user at the keyboard and store it in integer variable age.
c) std::cin >> age;
answer: std::cin >> age;

D) If the variable number is not equal to 7, print "The variable number is not equal to 7".
d) if(number != 7) { std::cout << "The variable number is not equal to 7";}
answer:
if (number != 7) {
	std::cout << "The variable number is not equal to 7\n";
}

E) Print the message "This is a C++ program" on one line.
e) std::cout << "This is a C++ program" << std::endl;
answer:
std::cout << "This is a C++ program\n";

F) Print the message "This is a C++ program" on two lines. End the first line with C++.
f) std::cout << "This is a C++\n program" << std::endl;
answer:
std::cout << "This is a C++\nprogram\n";

G) Print the message "This is a C++ program" with each word on a separate line.
g) std::cout << "This\n is\n a\n C++\n program\n";
answer:
std::cout << "This\nis\na\nC++\nprogram\n";

H) Print the message "This is a C++ program". Separate each word from the next by a tab.
h) std::cout "This\t is\t a\t C++\t program\t";
answer:
std::cout << "This\tis\ta\tC++\tprogram\t";

===========================2.4

Write a statement (or comment) to accomplish each of the following (assume that using directives have been used for cin, cout and endl):

A) State that a program calculates the product of three integers.
a) 
// calculates the product of three integers
answer:
// Calculate the product of three integers

B) Declare the variables x, y, z and result to be of type int (in separate statements).
b)
int x;
int y;
int z;
int result;
answer:

int x{0};
int y{0};
int z{0};
int result{0};

C) Prompt the user to enter three integers.
c)
cout << "Enter three integers: ";
answer:

cout << "Enter three integers: ";

D) Read three integers from the keyboard and store them in the variables x, y and z.
d)
cin >> x >> y >> z;
answer:
cin >> x >> y >> z;

E) Compute the product of the three integers contained in variables x, y and z, and assign the result to the variable result.
e)
result = x * y * z;
answer:


F) Print "The product is " followed by the value of the variable result.
f)
cout << "The product is " << result << endl;
answer:
cout < "The product is " << result << endl;

G) Return a value from main indicating that the program terminated successfully.
g)
return 0;
answer:
return 0;

===========================2.5
Using the statements you wrote in Exercise 2.4, write a complete program that calculates and displays the product of three integers. Add comments to the code where appropriate. [Note: You’ll need to write the necessary using directives.]

// program: calculates the product of three integers
#include <iostream>
using std::cout;
using std::cin;
using std::endl;
int main(){
	int x;
	int y;
	int z;
	int result;
	cout << "Enter three integer values: "<< endl;
	cin >> x >> y >> z;
	result = x * y * z;
	cout << "Result " << result << endl;
	return 0;
}

answer:

// Calculate the product of three integers
#include <iostream> // enables program to perform input and output
using namespace std; // program uses names from the std namespace

// function main begins program execution
int main(){
	int x{0}; 		// first integer to multiply
	int y{0}; 		// second integer to multiply
	int z{0}; 		// third integer to multiply
	int result{0};	// the product of the three integers
	cout << "Enter three integer values: "<< endl; // prompt user for data
	cin >> x >> y >> z; // read three integers from user
	result = x * y * z; // multiply the three integers; store result
	cout << "The product is " << result << endl; // print result; end line
	return 0;
} // end function main

===========================2.6
Identify and correct the errors in each of the following statements (assume that the statement using std::cout; is used):

a) if ( c < 7 ); // <- cannot end if statement without body needs {}
	cout << "c is less than 7\n";

Answer: Error: semicolon after the right parenthesis of the condition in the if statement. 

Correction: remove the semicolon after the right parenthsis. [Note: The result of this error is that the output statement executes whether or not the condition in the if statement is true.] The semicolon after the right parenthesis is a null (or empty) statement that does nothing.

b) if ( c => 7 ) // <- incorrect comparator operator must be >=
	cout << "c is equal to or greater than 7\n";

Answer: Error: incorrect realtional operator =>.

Correction: Change => to >=, and you may want to change "equal to or greater than" to "greater than or equal to" as well.

===========================Exercises
===========================2.7

Discuss the meaning of each of the following objects:
a) std::cin
b) std::cout

std::cin means allow input after >>
std::cout means allow output after <<

===========================2.8

Fill in the blanks in each of the following:

a) _____ are used to document a program and improve its readability.
b) The object used to print information on the screen is _____.
c) A C++ statement that makes a decision is _____.
d) Most calculations are normally performed by _____ statements.
e) The _____ object inputs values from the keyboard.

a) comments
b) std::cout
c) if or conditional
d) arthimetic
e) std::cin

answer:

===========================2.9

Write a single C++ statement or line that accomplishes each of the following:

a) Print the message "Enter two numbers".
b) Assign the product of variables b and c to variable a.
c) State that a program performs a payroll calculation (i.e., use text that helps to document a program).
d) Input three integer values from the keyboard into integer variables a, b and c.

a) std::cout << "Enter two numbers";
b) a = b * c;
c) // performs a payroll calculation
d) cin >> a >> b >> c;

answer:

===========================2.10

State which of the following are true and which are false. If false, explain your answers.

a) C++ operators are evaluated from left to right.
b) The following are all valid variable names: _under_bar_, m928134, t5, j7, her_sales, his_account_total, a, b, c, z, z2. 
c) The statement cout << "a = 5;"; is a typical example of an assignment statement.
d) A valid C++ arithmetic expression with no parentheses is evaluated from left to right.
e) The following are all invalid variable names: 3g, 87, 67h2, h22, 2h.

a) true, if no parentheses are present
b) true
c) true
d) true
e) true

answer:

===========================2.11

Fill in the blanks in each of the following:

a) What arithmetic operations are on the same level of precedence as multiplication? _____.

b) When parentheses are nested, which set of parentheses is evaluated first in an arithmetic expression? _____.

c) A location in the computer’s memory that may contain different values at various times throughout the execution of a program is called a(n) _____.

a) % and /
b) innermost, or right to left
c) address

answer:

===========================2.12

What, if anything, prints when each of the following C++ statements is performed? If nothing prints, then answer “nothing.” Assume x = 2 and y = 3.

a) cout << x;
b) cout << x + x;
c) cout << "x=";
d) cout << "x = " << x;
e) cout << x + y << " = " << y + x;
f) z = x + y;
g) cin >> x >> y;
h) // cout << "x + y = " << x + y;
i) cout << "\n";

a) 2
b) 5
c) x=
d) x = 5
e) 5 = 5
f) nothing
g) nothing
h) nothing
i) 

answer:

a)
b)
c)
d)
e)
f)
g)
h)
i)

===========================2.13

Which of the following C++ statements contain variables whose values are replaced?
a) cin >> b >> c >> d >> e >> f;
b) p = i + j + k + 7;
c) cout << "variables whose values are replaced";
d) cout << "a = 5";

a) cin >> b >> c >> d >> e >> f;

answer:


===========================2.14

Given the algebraic equation y = ax**3 + 7, which of the following, if any, are correct C++ statements for this equation?
a) y = a * x * x * x + 7;
b) y = a * x * x * ( x + 7 );
c) y = ( a * x ) * x * ( x + 7 );
d) y = (a * x) * x * x + 7;
e) y = a * ( x * x * x ) + 7;
f) y = a * x * ( x * x + 7 );

e) y = a * ( x * x * x ) + 7;

answer:

===========================2.15

(Order of Evalution) State the order of evaluation of the operators in each of the following C++ statements and show the value of x after each statement is performed.
a) x = 7 + 3 * 6 / 2 - 1;
b) x = 2 % 2 + 2 * 2 - 2 / 2;
c) x = ( 3 * 9 * ( 3 + ( 9 * 3 / ( 3 ) ) ) );

a)
x = 7 + 3 * 6 / 2 - 1;
x = 7 + 18 / 2 - 1;
x = 7 + 9 - 1;
x = 16 - 1;
x = 15

b)
x = 2 % 2 + 2 * 2 - 2 / 2;
x = 0 + 2 * 2 - 2 / 2;
x = 0 + 4 - 2 / 2;
x = 0 + 4 - 1;
x = 4 - 1;
x = 3

c)
x = ( 3 * 9 * ( 3 + ( 9 * 3 / ( 3 ) ) ) );
x = ( 3 * 9 * ( 3 + ( 9 * 3 / 3 ) ) );
x = ( 3 * 9 * ( 3 + ( 27 / 3 ) ) );
x = ( 3 * 9 * ( 3 + ( 9 ) ) );
x = ( 3 * 9 * ( 12 ) ) );
x = ( 3 * 9 * 12 ) );
x = ( 27 * 12 ) );
x = ( 27 * 12 );

   1
   27
   12
   __
   54
  37x
x = 414;

answer:


===========================2.16

(Arithmetic) Write a program that asks the user to enter two numbers, obtains the two numbers from the user and prints the sum, product, difference, and quotient of the two numbers.

/*
(Arithmetic) Write a program that asks the user to enter two numbers, obtains the two numbers from the user and prints the sum, product, difference, and quotient of the two numbers.
*/
#include <iostream>
using namespace std;

int main(){
	int sum{0};
	int product{0};
	int difference{0};
	int quotient{0};
	int val1{0};
	int val2{0};
	cout << "Give two numbers: " << endl;
	cin >> val1 >> val2;
	sum = val1 + val2;
	product = val1 * val2;
	if (val1 >= val2){
		difference = val1 - val2;
	}
	else{
		difference = val2 - val1;
	}
	if (val1 >= val2){
		quotient = val1/val2;
	}
	else{
		quotient = val2/val1;
	}
	cout << "Sum: "<< sum << endl;
	cout << "Product: "<< product << endl;
	cout << "Difference: "<< difference << endl;
	cout << "Quotient: "<< quotient << endl;
	return 0;
}
/*
$ ./ch2_exercise_2_16 
Give two numbers: 
19
17
Sum: 36
Product: 323
Difference: 2
Quotient: 1

$ ./ch2_exercise_2_16 
Give two numbers: 
10
5
Sum: 15
Product: 50
Difference: 5
Quotient: 2
*/


===========================2.17

(Printing) Write a program that prints the numbers 1 to 4 on the same line with each pair of adjacent numbers separated by one space. Do this several ways:
a) Using one statement with one stream insertion operator.
b) Using one statement with four stream insertion operators.
c) Using four statements.

/*
(Printing) Write a program that prints the numbers 1 to 4 on the same line with each pair of adjacent numbers separated by one space. Do this several ways:
a) Using one statement with one stream insertion operator.
b) Using one statement with four stream insertion operators.
c) Using four statements.
*/
#include <iostream>
using namespace std;

int main(){
	cout << "1 2 3 4" << endl;//a
	cout << "1 " << "2 " << "3 " << "4" << endl;//b
	cout << "1"; //c
	cout << " 2";
	cout << " 3";
	cout << " 4";
	return 0;
}
/*
$ ./ch2_exercise_2_17
1 2 3 4
1 2 3 4
1 2 3 4
*/

===========================2.18

(Comparing Integers) Write a program that asks the user to enter two integers, obtains the numbers from the user, then prints the larger number followed by the words "is larger." If  numbers are equal, print the message "These numbers are equal."

/*
(Comparing Integers) Write a program that asks the user to enter two integers, obtains the numbers from the user, then prints the larger number followed by the words "is larger." If  numbers are equal, print the message "These numbers are equal."
*/
#include <iostream>
using namespace std;

int main(){
	int val1{0};
	int val2{0};
	cout << "Enter two numbers: " << endl;
	cin >> val1 >> val2;
	
	if(val1 > val2)
		cout << "val1: " << val1 << " is larger." << endl;
	
	if (val2 > val1)
		cout << "val2: " << val2 << " is larger." << endl;
	if (val1 == val2)
		cout << "These numbers are equal." << endl;

	return 0;
}
/*
$ ./ch2_exercise_2_18
Enter two numbers: 
1000
100000
val2: 100000 is larger.

$ ./ch2_exercise_2_18
Enter two numbers: 
9
1
val1: 9 is larger.

$ ./ch2_exercise_2_18
Enter two numbers: 
200
1
val1: 200 is larger.

$ ./ch2_exercise_2_18
Enter two numbers: 
-1000
-100000
val1: -1000 is larger.
*/


answer:

===========================2.19

(Arithmetic, Smallest and Largest) Write a program that inputs three integers from the keyboard and prints the sum, average, product, smallest and largest of these numbers. The screen dialog should appear as follows:

Input three different integers: 13 27 14
Sum is 54
Average is 18
Product is 4914
Smallest is 13
Largest is 27

/*
(Arithmetic, Smallest and Largest) Write a program that inputs three integers from the keyboard and prints the sum, average, product, smallest and largest of these numbers. The screen dialog should appear as follows:

Input three different integers: 13 27 14
Sum is 54
Average is 18
Product is 4914
Smallest is 13
Largest is 27
*/
#include <iostream>
using namespace std;

int main(){

	int Sum{0};
	int Average{0};
	int Product{0};
	int Smallest{0};
	int Largest{0};

	int val1{0};
	int val2{0};
	int val3{0};

	cout << "Input three different integers: " << endl;
	cin >> val1 >> val2 >> val3;

	Sum = val1 + val2 + val3;
	Product = val1 * val2 * val3;
	Average = Sum / 3;

	Largest = val1;
	if (val2 > val1){
		Largest = val2;
	}
	else if (val3 > val1){
		Largest = val3;
	}

	Smallest = val1;
	if (val2 < val1){
		Smallest = val2;
	}
	else if (val3 < val1){
		Smallest = val1;
	}

	cout << "Sum: "<< Sum << endl;
	cout << "Average: "<< Average << endl;
	cout << "Product: "<< Product << endl;
	cout << "Smallest: "<< Smallest << endl;
	cout << "Largest: "<< Largest << endl;

	return 0;
}
/*
Input three different integers: 
13
27
14
Sum: 54
Average: 18
Product: 4914
Smallest: 13
Largest: 27
*/

answer:

===========================2.20

(Diameter, Circumference and Area of a Circle) Write a program that reads in the radius of a circle as an integer and prints the circle’s diameter, circumference and area. Use the constant value 3.14159 for π. Do all calculations in output statements. [Note: In this chapter, we’ve discussed only integer constants and variables. In Chapter 4 we discuss floating-point numbers, i.e., values that can have decimal points.]


answer:

===========================2.21

(Displaying Shapes with Asterisks) Write a program that prints a box, an oval, an arrow and a diamond as follows:

*********      ***       *       *
*       *    *     *    ***     * *
*       *   *       *  *****   *   *
*       *   *       *    *    *     *
*       *   *       *    *   *       *
*       *   *       *    *    *     *
*       *   *       *    *     *   *
*       *    *     *     *      * *
*********      ***       *       *


answer:

/*
(Displaying Shapes with Asterisks) Write a program that prints a box, an oval, an arrow and a diamond as follows:

*********      ***       *       *
*       *    *     *    ***     * *
*       *   *       *  *****   *   *
*       *   *       *    *    *     *
*       *   *       *    *   *       *
*       *   *       *    *    *     *
*       *   *       *    *     *   *
*       *    *     *     *      * *
*********      ***       *       *
*/
#include <iostream>
using namespace std;

int main(){
	cout << "*********      ***       *       *\n"
		 << "*       *    *     *    ***     * *\n"
		 << "*       *   *       *  *****   *   *\n"
		 << "*       *   *       *    *    *     *\n"
		 << "*       *   *       *    *   *       *\n"
		 << "*       *   *       *    *    *     *\n"
		 << "*       *   *       *    *     *   *\n"
		 << "*       *    *     *     *      * *\n"
		 << "*********      ***       *       *\n";
	return 0;
}
/*
$ ./ch2_exercise_2_21
*********      ***       *       *
*       *    *     *    ***     * *
*       *   *       *  *****   *   *
*       *   *       *    *    *     *
*       *   *       *    *   *       *
*       *   *       *    *    *     *
*       *   *       *    *     *   *
*       *    *     *     *      * *
*********      ***       *       *
*/

===========================2.22

What does the following code print?
cout << "*\n**\n***\n****\n*****" << endl;

*
**
***
****
*****

===========================2.23

(Largest and Smallest Integers) Write a program that reads in five integers and determines and prints the largest and the smallest integers in the group. Use only the programming techniques you learned in this chapter.

/*
(Largest and Smallest Integers) Write a program that reads in five integers and determines and prints the largest and the smallest integers in the group. Use only the programming techniques you learned in this chapter.
*/
#include <iostream>
using namespace std;

int main(){
	int smallest{0};
	int largest{0};
	int val1{0};
	int val2{0};
	int val3{0};
	int val4{0};
	int val5{0};
	cout << "Give five numbers: " << endl;
	cin >> val1 >> val2 >> val3 >> val4 >> val5;

	smallest = val1;
	if (val2 < val1){
		smallest = val2;
	}
	if (val3 < val1){
		smallest = val3;
	}
	if (val4 < val1){
		smallest = val4;
	}
	if (val5 < val1){
		smallest = val5;
	}

	largest = val1;
	if (val2 > val1){
		largest = val2;
	}
	if (val3 > val1){
		largest = val3;
	}
	if (val4 > val1){
		largest = val4;
	}
	if (val5 > val1){
		largest = val5;
	}

	cout << "largest is: " << largest << endl;
	cout << "smallest is: " << smallest << endl;

	return 0;
}
/*
$ ./ch2_exercise_2_23
Give five numbers: 
10 90 34 77 888
largest is: 888
smallest is: 10

$ ./ch2_exercise_2_23
Give five numbers: 
800 -112 56940 12 3 4
largest is: 56940
smallest is: 3
*/

answer:

===========================2.24

(Odd or Even) Write a program that reads an integer and determines and prints whether it’s odd or even. [Hint: Use the modulus operator. An even number is a multiple of two. Any multiple of two leaves a remainder of zero when divided by 2.]

/*
(Odd or Even) Write a program that reads an integer and determines and prints whether it’s odd or even. [Hint: Use the modulus operator. An even number is a multiple of two. Any multiple of two leaves a remainder of zero when divided by 2.]
*/
#include <iostream>
using namespace std;

int main(){
	int value{0};
	cout << "Give an integer: " << endl;
	cin >> value;
	if (value % 2 == 0){
		cout << value << " is even." << endl;
	}
	else {
		cout << value << " is odd." << endl;
	}
	return 0;
}
/*
$ ./ch2_exercise_2_24
Give an integer: 
10
10 is even.

$ ./ch2_exercise_2_24
Give an integer: 
333
333 is odd.
*/

answer:

===========================2.25

(Multiples) Write a program that reads in two integers and determines and prints if the first is a multiple of the second. [Hint: Use the modulus operator.]

/*
(Multiples) Write a program that reads in two integers and determines and prints if the first is a multiple of the second. [Hint: Use the modulus operator.]
*/
#include <iostream>
using namespace std;

int main(){
	int first{0};
	int second{0};
	cout << "Input two integers: " << endl;
	cin >> first >> second;
	if (second % first == 0){
		cout << first << " is a multiple of " << second << endl;
	}
	if (first % second == 0){
		cout << second << " is a multiple of " << first << endl;
	}
	return 0;
}
/*
$ ./ch2_exercise_2_25
Input two integers: 
100
10
10 is a multiple of 100

$ ./ch2_exercise_2_25
Input two integers: 
90
9
9 is a multiple of 90

$ ./ch2_exercise_2_25
Input two integers: 
90
9
9 is a multiple of 90

$ ./ch2_exercise_2_25
Input two integers: 
9
90
9 is a multiple of 90

*/

===========================2.26

(Checkerboard Pattern) Display the following checkerboard pattern with eight output statements, then display the same pattern using as few statements as possible.

* * * * * * * *
 * * * * * * * *
* * * * * * * *
 * * * * * * * *
* * * * * * * *
 * * * * * * * *
* * * * * * * *
 * * * * * * * *

#include <iostream>
using namespace std;

int main(){
	string first = "* * * * * * * *";
	string second =  " * * * * * * * *";
	/*
	cout << first << '\n' << second << '\n'
		<< first << '\n' << second << '\n'
		<< first << '\n' << second << '\n'
		<< first << '\n' << second << '\n';
	*/
	for(int i = 0; i < 4; i++){
		cout << first << '\n' << second << '\n';
	}
	return 0;
}

/*
first
$ ./ch2_exercise_2_26
* * * * * * * *
 * * * * * * * *
* * * * * * * *
 * * * * * * * *
* * * * * * * *
 * * * * * * * *
* * * * * * * *
 * * * * * * * *

second
$ ./ch2_exercise_2_26
* * * * * * * *
 * * * * * * * *
* * * * * * * *
 * * * * * * * *
* * * * * * * *
 * * * * * * * *
* * * * * * * *
 * * * * * * * *
*/

===========================2.27

(Integer Equivalent of a Character) Here is a peek ahead. In this chapter you learned about integers and the type int. C++ can also represent uppercase letters, lowercase letters and a considerable variety of special symbols. C++ uses small integers internally to represent each different character. The set of characters a computer uses and the corresponding integer representations for those characters are called that computer’s character set. You can print a character by enclosing that character in single quotes, as with

	cout << 'A'; // print an uppercase A

You can print the integer equivalent of a character using static_cast as follows:

	cout << static_cast< int >( 'A' ); // print 'A' as an integer

This is called a cast operation (we formally introduce casts in Chapter 4). When the preceding statement executes, it prints the value 65 (on systems that use the ASCII character set). Write a program that prints the integer equivalent of a character typed at the keyboard. Store the input in a variable of type char. Test your program several times using uppercase letters, lowercase letters, digits and special characters (like $).


/*
(Integer Equivalent of a Character) Here is a peek ahead. In this chapter you learned about integers and the type int. C++ can also represent uppercase letters, lowercase letters and a considerable variety of special symbols. C++ uses small integers internally to represent each different character. The set of characters a computer uses and the corresponding integer representations for those characters are called that computer’s character set. You can print a character by enclosing that character in single quotes, as with

	cout << 'A'; // print an uppercase A

You can print the integer equivalent of a character using static_cast as follows:

	cout << static_cast< int >( 'A' ); // print 'A' as an integer

This is called a cast operation (we formally introduce casts in Chapter 4). When the preceding statement executes, it prints the value 65 (on systems that use the ASCII character set). Write a program that prints the integer equivalent of a character typed at the keyboard. Store the input in a variable of type char. Test your program several times using uppercase letters, lowercase letters, digits and special characters (like $).

*/
#include <iostream>
using namespace std;

int main(){
	//cout << static_cast< int >( 'A' ); // print 'A' as an integer
	char x{'A'};
	cout<<"Give a char: "<<endl;
	cin>>x;
	cout << static_cast< int >( x ) << endl;
	return 0;
}
/*
$ ./ch2_exercise_2_27
Give a char: 
A
65
$ make

$ ./ch2_exercise_2_27
Give a char: 
U
85

$ ./ch2_exercise_2_27
Give a char: 
p
112

$ ./ch2_exercise_2_27
Give a char: 
$
36

$ ./ch2_exercise_2_27
Give a char: 
%
37

$ ./ch2_exercise_2_27
Give a char: 
 

_
95
*/


answer:


===========================2.28

(Digits of an Integer) Write a program that inputs a five-digit integer, separates the integer into its digits and prints them separated by three spaces each. [Hint: Use the integer division and modulus operators.] For example, if the user types in 42339, the program should print:

4	2	3	3	9

/*
(Digits of an Integer) Write a program that inputs a five-digit integer, separates the integer into its digits and prints them separated by three spaces each. [Hint: Use the integer division and modulus operators.] For example, if the user types in 42339, the program should print:

4	2	3	3	9
*/
#include <iostream>
using namespace std;

int main(){
	int five_digit_num{0};
	int first{0};
	int second{0};
	int third{0};
	int fourth{0};
	int fifth{0};
	cout << "Enter a five digit integer: " << endl;
	cin >> five_digit_num;
	//cout << five_digit_num % 10000 << endl;// 2339
	//cout << five_digit_num / 10000 << endl;// 4

	first = five_digit_num / 10000;
	second = five_digit_num / 1000 % 10;
	third = five_digit_num % 1000 / 100;
	fourth = five_digit_num % 100 / 10;
	fifth = five_digit_num % 10;

	/*
		42339 / 1000 = 42.339
		42339 / 100  = 423.39
		42339 / 10   = 4233.9
	*/

	cout << first << "   ";
	cout << second << "   ";
	cout << third << "   ";
	cout << fourth << "   ";
	cout << fifth << endl;
	return 0;
}
/*
$ ./ch2_exercise_2_28
Enter a five digit integer: 
12345
1   2   3   4   5

$ ./ch2_exercise_2_28
Enter a five digit integer: 
42339
4   2   3   3   9
*/
/*
>>> 42339 % 100 / 100
0.39
>>> 42339 % 100 % 100
39
>>> 42339 % 1000 % 100
39
>>> 42339 % 1000 / 100
3.39
*/

answer:
===========================2.29

(Table) Using the techniques of this chapter, write a program that calculates the squares and cubes of the integers from 0 to 10. Use tabs to print the following neatly formatted table of values:

integer square  cube
0 		0 		0
1 		1 		1
2 		4 		8
3 		9 		27
4 		16 		64
5 		25 		125
6 		36 		216
7 		49 		343
8 		64 		512
9 		81 		729
10 		100 	1000

===========================Making a Difference
===========================2.30

2.30 (Body Mass Index Calculator) We introduced the body mass index (BMI) calculator in Exercise 1.9. The formulas for calculating BMI are

	BMI = weightInPounds * 703 / heightInInches * heightInInches

or

	BMI = weightInKilograms / heightInMeters

Create a BMI calculator application that reads the user’s weight in pounds and height in inches (or, if you prefer, the user’s weight in kilograms and height in meters), then calculates and  the user’s body mass index. Also, the application should display the following information from the Department of Health and Human Services/National Institutes of Health so the user can evaluate his/her BMI:


BMI VALUES
Underweight: less than 18.5
Normal:		 between 18.5 and 24.9
Overweight:	 between 25 and 29.9
Obese:		 30 or greater


[Note: In this chapter, you learned to use the int type to represent whole numbers. The BMI calculations when done with int values will both produce whole-number results. In Chapter 4 you’ learn to use the double type to represent numbers with decimal points. When the BMI calculations are performed with doubles, they’ll both produce numbers with decimal points—these are called
“floating-point” numbers.]


/*
2.30 (Body Mass Index Calculator) We introduced the body mass index (BMI) calculator in Exercise 1.9. The formulas for calculating BMI are

	BMI = weightInPounds * 703 / heightInInches * heightInInches

or

	BMI = weightInKilograms / heightInMeters

Create a BMI calculator application that reads the user’s weight in pounds and height in inches (or, if you prefer, the user’s weight in kilograms and height in meters), then calculates and  the user’s body mass index. Also, the application should display the following information from the Department of Health and Human Services/National Institutes of Health so the user can evaluate his/her BMI:


BMI VALUES
Underweight: less than 18.5
Normal:		 between 18.5 and 24.9
Overweight:	 between 25 and 29.9
Obese:		 30 or greater


[Note: In this chapter, you learned to use the int type to represent whole numbers. The BMI calculations when done with int values will both produce whole-number results. In Chapter 4 you’ learn to use the double type to represent numbers with decimal points. When the BMI calculations are performed with doubles, they’ll both produce numbers with decimal points—these are called
“floating-point” numbers.]

*/
#include <iostream>
using namespace std;

int main(){
	int weightInPounds{0};
	int heightInInches{0};
	int BMI;
	cout << "Give your weight in pounds and height in inches: ";
	cin >> weightInPounds >> heightInInches;

	BMI = (weightInPounds * 703) / (heightInInches * heightInInches);
	
	if (BMI < 18.5) {
		cout << "BMI = Underweight: less than 18.5" << endl;
	}
	if (BMI >= 18.5 && BMI <= 24.9) {
		cout << "BMI = Normal: between 18.5 and 24.9" << endl;
	}
	if (BMI >= 25 && BMI <= 29.9) {
		cout << "BMI = Overweight: between 25 and 29.9" << endl;
	}
	if (BMI > 30){
		cout << "BMI = Obese: 30 or greater" << endl;
	}
	return 0;
}
/*
$ ./ch2_exercise_2_30
Give your weight in pounds and height in inches: 175
70
BMI = Overweight: between 25 and 29.9

$ ./ch2_exercise_2_30
Give your weight in pounds and height in inches: 172
70  
BMI = Normal: between 18.5 and 24.9



answer:

===========================2.31

(Car-Pool Savings Calculator) Research several car-pooling websites. Create an application that calculates your daily driving cost, so that you can estimate how much money could be saved by car pooling, which also has other advantages such as reducing carbon emissions and reducing traffic congestion. The application should input the following information and display the user’s cost per day of driving to work:

a) Total miles driven per day.
b) Cost per gallon of gasoline.
c) Average miles per gallon.
d) Parking fees per day.
e) Tolls per day.

/*
(Car-Pool Savings Calculator) Research several car-pooling websites. Create an application that calculates your daily driving cost, so that you can estimate how much money could be saved by car pooling, which also has other advantages such as reducing carbon emissions and reducing traffic congestion. The application should input the following information and display the user’s cost per day of driving to work:

a) Total miles driven per day.
b) Cost per gallon of gasoline.
c) Average miles per gallon.
d) Parking fees per day.
e) Tolls per day.

*/
#include <iostream>
using namespace std;

int main(){
	int Total_miles_driven_per_day{0};
	float Cost_per_gallon_of_gasoline{0};
	int Average_miles_per_gallon{0};
	int Parking_fees_per_day{0};
	int Tolls_per_day{0};
	int User_cost_per_day_driving_to_work{0};
	int User_cost_per_day_driving_to_work_and_back{0};

	cout << "Enter Total miles driven per day: ";
	cin >> Total_miles_driven_per_day ;
	cout << "Enter Cost per gallon of gasoline: ";
	cin >> Cost_per_gallon_of_gasoline ;
	cout << "Enter Average miles per gallon: ";
	cin >> Average_miles_per_gallon ;
	cout << "Enter Parking fees per day: ";
	cin >> Parking_fees_per_day ;
	cout << "Enter Toll fees per day: ";
	cin >> Tolls_per_day;

	User_cost_per_day_driving_to_work = Total_miles_driven_per_day * (Cost_per_gallon_of_gasoline / Average_miles_per_gallon) +  Parking_fees_per_day + Parking_fees_per_day + Tolls_per_day;
	User_cost_per_day_driving_to_work_and_back = User_cost_per_day_driving_to_work * 2;
	
	//total miles driven per day = 50
	// 30 miles per gallon
	// cost per gallon = 2.50
	
	cout << "Your cost to drive to work per day is: " << User_cost_per_day_driving_to_work << endl;
	cout << "Your cost to drive to work and back per day is: " << User_cost_per_day_driving_to_work_and_back << endl;
	return 0;
}
/*
$ ./ch2_exercise_2_31
Enter Total miles driven per day: 50
Enter Cost per gallon of gasoline: 2.50
Enter Average miles per gallon: 30
Enter Parking fees per day: 0
Enter Toll fees per day: 0
Your cost to drive to work per day is: 4
Your cost to drive to work and back per day is: 8
*/