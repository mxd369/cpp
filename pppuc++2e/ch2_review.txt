1. What is the purpose of the “Hello, World!” program?
2. Name the four parts of a function.
3. Name a function that must appear in every C++ program.
4. In the “Hello, World!” program, what is the purpose of the line return 0;?
5. What is the purpose of the compiler?
6. What is the purpose of the #include directive?
7. What does a .h suffix at the end of a file name signify in C++?
8. What does the linker do for your program?
9. What is the difference between a source file and an object file?
10. What is an IDE and what does it do for you?
11. If you understand everything in the textbook, why is it necessary to practice?

-----

Answers

1.
What’s so important about the “Hello, World!” program? Its purpose is to get us acquainted with the basic tools of programming. We tend to do an extremely simple example, such as “Hello, World!,” whenever we approach a new tool. That way, we separate our learning into two parts: first we learn the basics of our tools with a trivial program, and later we learn about more complicated programs without being distracted by our tools. Learning the tools and the language simultaneously is far harder than doing first one and then the other. This approach to simplifying learning a complex task by breaking it into a series of small (and more manageable) steps is not limited to programming and computers. It is common and useful in most areas of life, especially in those that involve some practical skill.

This is the classic first program for any programming language, provides practical knowledge of programming syntaxes and process of program execution.


2.
example: int main() { }

* A return type, here int (meaning “integer”), which specifies what kind of result, if any, the function will return to whoever asked for it to be executed. The word int is a reserved word in C++ (a keyword), so int cannot be used as the name of anything else (see §A.3.1).

* A name, here main.

* A parameter list enclosed in parentheses (see §8.2 and §8.6), here (); in this case, the parameter list is empty.

* A function body enclosed in a set of “curly braces,” { }, which lists the actions (called statements) that the function is to perform.


Summary of question 2:
  1. Function return type:
    Gives information of what type of value function will return if any. If function doesn't return any value then its return type should be void. Some possible return types:
      * int for integer value
      * float or double for real values
	  * char for characters
	  * void if function doesn't return any values

  2. Function Name:
    used when programmer wants to call it.

  3. Function body:
    Functions have to execute certain instructions written within curly braces.

  4. Parameter list of function:
    list of variables or values passed to function in parenthesis(), by calling functions
	
	Example Function:
	  int**<-(1) Return Type** rectArea**<-(2) Function Name** (int length, int breadth)**(3) Parameter list**
	  { ** (4) function body start **
	    int result;
		result = length + breadth;
		return result;
	  } ** function body start **

3.
int main(){}


4.
Since main() is called by “the system,” we won’t use that return value. However, on some systems (notably Unix/Linux) it can be used to check whether the program succeeded. A zero (0) returned by main() indicates that the program terminated successfully.


5.
C++ is a compiled language. That means that to get a program to run, you must first translate it from the human-readable form to something a machine can “understand.” That translation is done by a program called a compiler. What you read and write is called source code or program text, and what the computer executes is called executable, object code, or machine code.


6.
Instructs the computer to make available (“to include”) facilities from a file.


7.
the suffix .h and is called a header or a header file. A header contains definitions of terms, such as cout, that we use in our program.


8.
A program usually consists of several separate parts, often developed by different people. For example, the “Hello, World!” program consists of the part we wrote plus parts of the C++ standard library. These separate parts (sometimes called translation units) must be compiled and the resulting object code files must be linked together to form an executable program. The program that links such parts together is (unsurprisingly) called a linker.
  C++ source code: hello_world.cpp
    C++ compiler
     Object code: hello_world.obj
     Object code from the C++ standard library: ostream.obj
      Linker
        Executable program: hello_world.exe


9.
What you read and write is called source code or program text, and what the computer executes is called executable, object code, or machine code. Typically C++ source code files are given the suffix .cpp (e.g., hello_world.cpp) or .h (as in std_lib_facilities.h), and
object code files are given the suffix .obj (on Windows) or .o (Unix).


10.
To program, we use a programming language. We also use a compiler to translate our source code into object code and a linker to link our object code into an executable program. In addition, we use some program to enter our source code text into the computer and to edit it. These are just the first and most crucial tools that constitute our programmer’s tool set or “program development environment.” If you work from a command-line window, as many professional programmers do, you will have to issue the compile and link commands yourself. If instead you use an IDE (“interactive development environment” or “integrated development environment”), as many professional programmers also do, a simple click on the correct button will do the job. See Appendix C for a description of how to compile and link on your C++ implementation. IDEs usually include an editor with helpful features like color coding to help distinguish between comments, keywords, and other parts of your program source code, plus other facilities to help you debug your code, compile it, and run it. Debugging is the activity of finding errors in a program and removing them; you’ll hear a lot about that along the way.


11.
You might think you understand everything you read and everything your Mentor or instructor told you, but repetition and
practice are necessary to develop programming skills. In this regard, programming is like athletics, music, dance, or any skillbased craft. Imagine people trying to compete in any of those fields without regular practice. You know how well they would perform. Constant practice — for professionals that means lifelong constant practice — is the only way to develop and maintain a high-level practical skill.